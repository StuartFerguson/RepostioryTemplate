// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.5.0.0
//      SpecFlow Generator Version:3.5.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace EstateReporting.IntegrationTests.Reporting
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "base")]
    [Xunit.TraitAttribute("Category", "shared")]
    public partial class SettlementByDayReportsFeature : object, Xunit.IClassFixture<SettlementByDayReportsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "base",
                "shared"};
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "SettlementByDayReports.feature"
#line hidden
        
        public SettlementByDayReportsFeature(SettlementByDayReportsFeature.FixtureData fixtureData, EstateReporting_IntegrationTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Reporting", "SettlementByDayReports", null, ProgrammingLanguage.CSharp, new string[] {
                        "base",
                        "shared"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "DisplayName",
                        "Description"});
            table28.AddRow(new string[] {
                        "estateManagement",
                        "Estate Managememt REST Scope",
                        "A scope for Estate Managememt REST"});
            table28.AddRow(new string[] {
                        "transactionProcessor",
                        "Transaction Processor REST  Scope",
                        "A scope for Transaction Processor REST"});
#line 6
 testRunner.Given("I create the following api scopes", ((string)(null)), table28, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "ResourceName",
                        "DisplayName",
                        "Secret",
                        "Scopes",
                        "UserClaims"});
            table29.AddRow(new string[] {
                        "estateManagement",
                        "Estate Managememt REST",
                        "Secret1",
                        "estateManagement",
                        "MerchantId, EstateId, role"});
            table29.AddRow(new string[] {
                        "transactionProcessor",
                        "Transaction Processor REST",
                        "Secret1",
                        "transactionProcessor",
                        ""});
#line 11
 testRunner.Given("the following api resources exist", ((string)(null)), table29, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClientId",
                        "ClientName",
                        "Secret",
                        "AllowedScopes",
                        "AllowedGrantTypes"});
            table30.AddRow(new string[] {
                        "serviceClient",
                        "Service Client",
                        "Secret1",
                        "estateManagement,transactionProcessor",
                        "client_credentials"});
#line 16
 testRunner.Given("the following clients exist", ((string)(null)), table30, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClientId"});
            table31.AddRow(new string[] {
                        "serviceClient"});
#line 20
 testRunner.Given("I have a token to access the estate management and transaction processor resource" +
                    "s", ((string)(null)), table31, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "EstateName"});
            table32.AddRow(new string[] {
                        "Test Estate1"});
#line 24
 testRunner.Given("I have created the following estates", ((string)(null)), table32, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "EstateName",
                        "OperatorName",
                        "RequireCustomMerchantNumber",
                        "RequireCustomTerminalNumber"});
            table33.AddRow(new string[] {
                        "Test Estate1",
                        "Safaricom",
                        "True",
                        "True"});
#line 28
 testRunner.Given("I have created the following operators", ((string)(null)), table33, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "EstateName",
                        "OperatorName",
                        "ContractDescription"});
            table34.AddRow(new string[] {
                        "Test Estate1",
                        "Safaricom",
                        "Safaricom Contract"});
#line 32
 testRunner.Given("I create a contract with the following values", ((string)(null)), table34, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "EstateName",
                        "OperatorName",
                        "ContractDescription",
                        "ProductName",
                        "DisplayText",
                        "Value"});
            table35.AddRow(new string[] {
                        "Test Estate1",
                        "Safaricom",
                        "Safaricom Contract",
                        "Variable Topup",
                        "Custom",
                        ""});
#line 36
 testRunner.When("I create the following Products", ((string)(null)), table35, "When ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "EstateName",
                        "OperatorName",
                        "ContractDescription",
                        "ProductName",
                        "CalculationType",
                        "FeeDescription",
                        "Value"});
            table36.AddRow(new string[] {
                        "Test Estate1",
                        "Safaricom",
                        "Safaricom Contract",
                        "Variable Topup",
                        "Percentage",
                        "Merchant Commission",
                        "0.50"});
#line 40
 testRunner.When("I add the following Transaction Fees", ((string)(null)), table36, "When ");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "MerchantName",
                        "AddressLine1",
                        "Town",
                        "Region",
                        "Country",
                        "ContactName",
                        "EmailAddress",
                        "EstateName",
                        "SettlementSchedule"});
            table37.AddRow(new string[] {
                        "Test Merchant 1",
                        "Address Line 1",
                        "TestTown",
                        "Test Region",
                        "United Kingdom",
                        "Test Contact 1",
                        "testcontact1@merchant1.co.uk",
                        "Test Estate1",
                        "Weekly"});
            table37.AddRow(new string[] {
                        "Test Merchant 2",
                        "Address Line 1",
                        "TestTown",
                        "Test Region",
                        "United Kingdom",
                        "Test Contact 2",
                        "testcontact2@merchant2.co.uk",
                        "Test Estate1",
                        "Monthly"});
#line 44
 testRunner.Given("I create the following merchants", ((string)(null)), table37, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperatorName",
                        "MerchantName",
                        "MerchantNumber",
                        "TerminalNumber",
                        "EstateName"});
            table38.AddRow(new string[] {
                        "Safaricom",
                        "Test Merchant 1",
                        "00000001",
                        "10000001",
                        "Test Estate1"});
            table38.AddRow(new string[] {
                        "Safaricom",
                        "Test Merchant 2",
                        "00000002",
                        "10000002",
                        "Test Estate1"});
#line 50
 testRunner.Given("I have assigned the following  operator to the merchants", ((string)(null)), table38, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeviceIdentifier",
                        "MerchantName",
                        "EstateName"});
            table39.AddRow(new string[] {
                        "123456780",
                        "Test Merchant 1",
                        "Test Estate1"});
            table39.AddRow(new string[] {
                        "123456781",
                        "Test Merchant 2",
                        "Test Estate1"});
#line 55
 testRunner.Given("I have assigned the following devices to the merchants", ((string)(null)), table39, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "Reference",
                        "Amount",
                        "DateTime",
                        "MerchantName",
                        "EstateName"});
            table40.AddRow(new string[] {
                        "Deposit1",
                        "50000.00",
                        "Today",
                        "Test Merchant 1",
                        "Test Estate1"});
            table40.AddRow(new string[] {
                        "Deposit1",
                        "50000.00",
                        "Today",
                        "Test Merchant 2",
                        "Test Estate1"});
#line 60
 testRunner.Given("I make the following manual merchant deposits", ((string)(null)), table40, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "DateTime",
                        "TransactionNumber",
                        "TransactionType",
                        "MerchantName",
                        "DeviceIdentifier",
                        "EstateName",
                        "OperatorName",
                        "TransactionAmount",
                        "CustomerAccountNumber",
                        "CustomerEmailAddress",
                        "ContractDescription",
                        "ProductName"});
            table41.AddRow(new string[] {
                        "2022-01-06",
                        "1",
                        "Sale",
                        "Test Merchant 1",
                        "123456780",
                        "Test Estate1",
                        "Safaricom",
                        "100.00",
                        "123456789",
                        "",
                        "Safaricom Contract",
                        "Variable Topup"});
            table41.AddRow(new string[] {
                        "2022-01-06",
                        "2",
                        "Sale",
                        "Test Merchant 1",
                        "123456780",
                        "Test Estate1",
                        "Safaricom",
                        "50.00",
                        "123456789",
                        "",
                        "Safaricom Contract",
                        "Variable Topup"});
            table41.AddRow(new string[] {
                        "2022-01-06",
                        "3",
                        "Sale",
                        "Test Merchant 1",
                        "123456780",
                        "Test Estate1",
                        "Safaricom",
                        "25.00",
                        "123456789",
                        "",
                        "Safaricom Contract",
                        "Variable Topup"});
            table41.AddRow(new string[] {
                        "2022-01-06",
                        "1",
                        "Sale",
                        "Test Merchant 2",
                        "123456781",
                        "Test Estate1",
                        "Safaricom",
                        "101.00",
                        "123456789",
                        "",
                        "Safaricom Contract",
                        "Variable Topup"});
            table41.AddRow(new string[] {
                        "2022-01-06",
                        "2",
                        "Sale",
                        "Test Merchant 2",
                        "123456781",
                        "Test Estate1",
                        "Safaricom",
                        "55.00",
                        "123456789",
                        "",
                        "Safaricom Contract",
                        "Variable Topup"});
            table41.AddRow(new string[] {
                        "2022-01-06",
                        "3",
                        "Sale",
                        "Test Merchant 2",
                        "123456781",
                        "Test Estate1",
                        "Safaricom",
                        "27.00",
                        "123456789",
                        "",
                        "Safaricom Contract",
                        "Variable Topup"});
#line 65
 testRunner.When("I perform the following transactions", ((string)(null)), table41, "When ");
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "EstateName",
                        "MerchantName",
                        "TransactionNumber",
                        "ResponseCode",
                        "ResponseMessage"});
            table42.AddRow(new string[] {
                        "Test Estate1",
                        "Test Merchant 1",
                        "1",
                        "0000",
                        "SUCCESS"});
            table42.AddRow(new string[] {
                        "Test Estate1",
                        "Test Merchant 1",
                        "2",
                        "0000",
                        "SUCCESS"});
            table42.AddRow(new string[] {
                        "Test Estate1",
                        "Test Merchant 1",
                        "3",
                        "0000",
                        "SUCCESS"});
            table42.AddRow(new string[] {
                        "Test Estate1",
                        "Test Merchant 2",
                        "1",
                        "0000",
                        "SUCCESS"});
            table42.AddRow(new string[] {
                        "Test Estate1",
                        "Test Merchant 2",
                        "2",
                        "0000",
                        "SUCCESS"});
            table42.AddRow(new string[] {
                        "Test Estate1",
                        "Test Merchant 2",
                        "3",
                        "0000",
                        "SUCCESS"});
#line 75
 testRunner.Then("transaction response should contain the following information", ((string)(null)), table42, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "SettlementDate",
                        "EstateName",
                        "NumberOfFees"});
            table43.AddRow(new string[] {
                        "2022-01-13",
                        "Test Estate1",
                        "3"});
            table43.AddRow(new string[] {
                        "2022-02-06",
                        "Test Estate1",
                        "3"});
#line 85
 testRunner.When("I get the pending settlements the following information should be returned", ((string)(null)), table43, "When ");
#line hidden
#line 90
 testRunner.When("I process the settlement for \'2022-01-13\' on Estate \'Test Estate1\' then 3 fees ar" +
                    "e marked as settled and the settlement is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 91
 testRunner.When("I process the settlement for \'2022-02-06\' on Estate \'Test Estate1\' then 3 fees ar" +
                    "e marked as settled and the settlement is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Settlement By Day")]
        [Xunit.TraitAttribute("FeatureTitle", "SettlementByDayReports")]
        [Xunit.TraitAttribute("Description", "Settlement By Day")]
        public virtual void SettlementByDay()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Settlement By Day", null, tagsOfScenario, argumentsOfScenario);
#line 93
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                            "SettlementDate",
                            "NumberOfFeesSettled",
                            "ValueOfFeesSettled"});
                table44.AddRow(new string[] {
                            "2022-01-13",
                            "3",
                            "0.88"});
                table44.AddRow(new string[] {
                            "2022-02-06",
                            "3",
                            "0.93"});
#line 94
 testRunner.When("I get the Estate Settlement By Date Report for Estate \'Test Estate1\' with the Sta" +
                        "rt Date \'2022-01-13\' and the End Date \'2022-02-06\' the following data is returne" +
                        "d", ((string)(null)), table44, "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Settlement By Day for Merchant")]
        [Xunit.TraitAttribute("FeatureTitle", "SettlementByDayReports")]
        [Xunit.TraitAttribute("Description", "Settlement By Day for Merchant")]
        public virtual void SettlementByDayForMerchant()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Settlement By Day for Merchant", null, tagsOfScenario, argumentsOfScenario);
#line 99
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                            "SettlementDate",
                            "NumberOfFeesSettled",
                            "ValueOfFeesSettled"});
                table45.AddRow(new string[] {
                            "2022-01-13",
                            "3",
                            "0.88"});
#line 100
 testRunner.When("I get the Estate Settlement By Date Report for Estate \'Test Estate1\' and Merchant" +
                        " \'Test Merchant 1\' with the Start Date \'2022-01-13\' and the End Date \'2022-02-06" +
                        "\' the following data is returned", ((string)(null)), table45, "When ");
#line hidden
                TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                            "SettlementDate",
                            "NumberOfFeesSettled",
                            "ValueOfFeesSettled"});
                table46.AddRow(new string[] {
                            "2022-02-06",
                            "3",
                            "0.93"});
#line 103
 testRunner.When("I get the Estate Settlement By Date Report for Estate \'Test Estate1\' and Merchant" +
                        " \'Test Merchant 2\' with the Start Date \'2022-01-13\' and the End Date \'2022-02-06" +
                        "\' the following data is returned", ((string)(null)), table46, "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.5.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                SettlementByDayReportsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                SettlementByDayReportsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
